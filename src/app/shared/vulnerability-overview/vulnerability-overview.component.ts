import {Component, Input, OnInit, ViewChild} from '@angular/core';
import {LoaderService} from '../../_services/loader.service';
import {BaseRequestService} from '../../_services/base.service';
import {MyToastrService} from '../../_services/toastr.service';
import {MatSidenav} from '@angular/material/sidenav';
import {CommonService} from '../../_services/common.services';

@Component({
  selector: 'app-vulnerability-overview',
  templateUrl: './vulnerability-overview.component.html',
  styleUrls: ['./vulnerability-overview.component.scss']
})

export class VulnerabilityOverviewComponent implements OnInit {
  @Input() currentCompany: any;
  @Input() mode: any;
  @ViewChild('snav', {static: true}) snav: MatSidenav;
  Objectkeys = Object.keys;
  vulnerabilityOverviewData: any;
  prodList: any;
  vulnerabilityProductOverviewData: any;
  vulnerabilityListData: any;
  showUpper = true;
  pageSize = 50;
  currentVStat: any;
  currentProduct: any;
  severityHtmlCols = {
    Critical: `<span class=" fw4  px-1 badge scritical">CRITICAL</span>`,
    High: `<span class=" fw4  px-1 badge shigh">HIGH</span>`,
    Medium: `<span class=" fw4  px-1 badge smedium">MEDIUM</span>`,
    Low: `<span class=" fw4  px-1 badge slow">LOW</span>`,
    Info: `<span class=" fw4  px-1 badge sinfo">INFO</span>`
  };
  vulnerabilityListCols: any = ['CVEID', 'title', 'severity', 'base_score',
    'impact_score', 'exploit_score', 'affected_assets'];
  vulnerabilityListCustomCols: any = [
    {col: 'CVEID', hyperLinkCall: {noFilter: true}},
    {col: 'title', filter: 'ellipsis:25'},
    {
      col: 'severity', isKeyword: true, header: 'Severity', htmlCols: this.severityHtmlCols,
      colFilters: {type: 'text', hKey: true}, noFilter: false
    },
    {col: 'affected_assets', hyperLinkCall: {noFilter: true}},
  ];
  vulnerabilityOverviewCols: any = ['os', 'Critical', 'High', 'Medium', 'Low', 'risk_score'];
  vulnerabilityOverviewCustomCols: any = [
    {col: 'Critical', hyperLinkCall: {noFilter: true}},
    {col: 'High', hyperLinkCall: {noFilter: true}},
    {col: 'Medium', hyperLinkCall: {noFilter: true}},
    {col: 'Low', hyperLinkCall: {noFilter: true}}
  ];
  view: string;
  currentCVE: any;

  constructor(private loaderService: LoaderService, private commonService: CommonService,
              private baseService: BaseRequestService, private toast: MyToastrService) {
  }

  getVulnerabilityOverview(): void {
    if (!this.mode && !this.currentCompany) {
      setTimeout(() => this.getVulnerabilityOverview(), 2000);
      return;
    }
    if (this.mode === 'global') {
      this.currentCompany = {_id: '', name: ''};
    }
    this.loaderService.display(true, 'Getting vulnerability stat overview...');
    this.baseService.doRequest(`/api/company/imaws/getVulnerabilityOsView`, 'post',
      {companyId: this.currentCompany._id}).subscribe((result: any) => {
      this.loaderService.display(false);
      if (result[0]) {
        this.vulnerabilityOverviewData = result[1];
      } else {
        this.toast.sToast('error', result[1]);
      }
    });
  }

  updateSeverityData(severity: string): void {
    this.getVulnerabilityProductOverview({row: this.currentVStat, col: severity});
  }

  getVulnerabilityProductOverview($event: any): void {
    if (!$event.row[$event.col]) {
      this.toast.sToast('info', `No ${$event.col} vulnerabilities found!`);
      return;
    }
    this.currentVStat = $event.row;
    this.currentVStat.severity = $event.col;
    this.loaderService.display(true, 'Getting vulnerability product overview...');
    const params: any = {companyId: this.currentCompany._id, os: $event.row.os, severity: $event.col};
    this.baseService.doRequest(`/api/company/imaws/getVulnerabilityProductView`, 'post',
      params).subscribe((result: any) => {
      this.loaderService.display(false);
      if (result[0]) {
        if (result[1] && result[1].length) {
          this.vulnerabilityProductOverviewData = result[1][0];
          this.prodList = this.Objectkeys(result[1][0]);
          this.getVulnerabilities(this.prodList[0]);
        }
      } else {
        this.toast.sToast('error', result[1]);
      }
    });
  }

  ngOnInit(): void {
    this.getVulnerabilityOverview();
  }

  getVulnerabilities(prod: string): void {
    this.currentProduct = prod;
    this.loaderService.display(true, 'Getting vulnerability overview...');
    this.vulnerabilityListData = undefined;
    const params: any = {
      companyId: this.currentCompany._id, os: this.currentVStat.os, severity: this.currentVStat.severity,
      productName: prod
    };
    this.baseService.doRequest(`/api/company/imaws/getVulnerabilityView`, 'post',
      params).subscribe((result: any) => {
      this.loaderService.display(false);
      if (result[0]) {
        result[1].forEach((obj: any, index: number) => {
          obj.CVEID = obj.vul_id;
          obj.affected_assets = 0;
          obj.affected_assets = obj.data.map((x: any) => x.assets.length).reduce((a: any, b: any) => a + b, 0);
          result[1][index] = {...obj, ...obj.score};
        });
        this.vulnerabilityListData = result[1];
      } else {
        this.toast.sToast('error', result[1]);
      }
    });
  }

  closeView(): void {
    this.currentVStat = undefined;
    this.currentProduct = undefined;
    this.currentCVE = undefined;
    this.vulnerabilityListData = [];
  }

  getCompanyAssetOverview($event: any): void {
    this.currentCVE = $event.row;
    this.snav.open();
  }

  close(back?: any): void {
    if (back) {
      return;
    }
    this.currentCVE = undefined;
    this.snav.close();
  }

  redirectToAsset(company: any, asset: any): any {
    localStorage.setItem('cmp', company.name);
    this.commonService.currentCompany = this.commonService.cHash[company.id];
    localStorage.setItem('newTab', 'cveAssets');
    localStorage.setItem('asset', asset.id);
    window.open('/company/companies', '_blank');
  }
}
