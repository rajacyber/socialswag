/* tslint:disable */
/* eslint-disable */
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import { RequestBuilder } from '../request-builder';
import { Observable } from 'rxjs';
import { map, filter } from 'rxjs/operators';

import { VulnerabilityTimeseries } from '../models/vulnerability-timeseries';
import { VulnerabilityTimeseriesCreate } from '../models/vulnerability-timeseries-create';
import { VulnerabilityTimeseriesGetResp } from '../models/vulnerability-timeseries-get-resp';

@Injectable({
  providedIn: 'root',
})
export class VulnerabilityTimeseriesService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient
  ) {
    super(config, http);
  }

  /**
   * Path part for operation getAllApiVulnerabilitytimeseriesGet
   */
  static readonly GetAllApiVulnerabilitytimeseriesGetPath = '/api/vulnerabilitytimeseries/';

  /**
   * Get All.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllApiVulnerabilitytimeseriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllApiVulnerabilitytimeseriesGet$Response(params?: {

    /**
     * Filter query to be executed against database.
     */
    'q'?: string;
    skip?: number;
    limit?: number;
    sort?: string;

    /**
     * Comma seperated list of fields to return.
     */
    fields?: string;
  }): Observable<StrictHttpResponse<VulnerabilityTimeseriesGetResp>> {

    const rb = new RequestBuilder(this.rootUrl, VulnerabilityTimeseriesService.GetAllApiVulnerabilitytimeseriesGetPath, 'get');
    if (params) {
      rb.query('q', params['q'], {});
      rb.query('skip', params.skip, {});
      rb.query('limit', params.limit, {});
      rb.query('sort', params.sort, {});
      rb.query('fields', params.fields, {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<VulnerabilityTimeseriesGetResp>;
      })
    );
  }

  /**
   * Get All.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getAllApiVulnerabilitytimeseriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllApiVulnerabilitytimeseriesGet(params?: {

    /**
     * Filter query to be executed against database.
     */
    'q'?: string;
    skip?: number;
    limit?: number;
    sort?: string;

    /**
     * Comma seperated list of fields to return.
     */
    fields?: string;
  }): Observable<VulnerabilityTimeseriesGetResp> {

    return this.getAllApiVulnerabilitytimeseriesGet$Response(params).pipe(
      map((r: StrictHttpResponse<VulnerabilityTimeseriesGetResp>) => r.body as VulnerabilityTimeseriesGetResp)
    );
  }

  /**
   * Path part for operation updateApiVulnerabilitytimeseriesPut
   */
  static readonly UpdateApiVulnerabilitytimeseriesPutPath = '/api/vulnerabilitytimeseries/';

  /**
   * Update.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateApiVulnerabilitytimeseriesPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApiVulnerabilitytimeseriesPut$Response(params: {
    body: VulnerabilityTimeseries
  }): Observable<StrictHttpResponse<VulnerabilityTimeseries>> {

    const rb = new RequestBuilder(this.rootUrl, VulnerabilityTimeseriesService.UpdateApiVulnerabilitytimeseriesPutPath, 'put');
    if (params) {
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<VulnerabilityTimeseries>;
      })
    );
  }

  /**
   * Update.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `updateApiVulnerabilitytimeseriesPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApiVulnerabilitytimeseriesPut(params: {
    body: VulnerabilityTimeseries
  }): Observable<VulnerabilityTimeseries> {

    return this.updateApiVulnerabilitytimeseriesPut$Response(params).pipe(
      map((r: StrictHttpResponse<VulnerabilityTimeseries>) => r.body as VulnerabilityTimeseries)
    );
  }

  /**
   * Path part for operation createApiVulnerabilitytimeseriesPost
   */
  static readonly CreateApiVulnerabilitytimeseriesPostPath = '/api/vulnerabilitytimeseries/';

  /**
   * Create.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createApiVulnerabilitytimeseriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createApiVulnerabilitytimeseriesPost$Response(params: {
    body: VulnerabilityTimeseriesCreate
  }): Observable<StrictHttpResponse<VulnerabilityTimeseries>> {

    const rb = new RequestBuilder(this.rootUrl, VulnerabilityTimeseriesService.CreateApiVulnerabilitytimeseriesPostPath, 'post');
    if (params) {
      rb.body(params.body, 'application/json');
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<VulnerabilityTimeseries>;
      })
    );
  }

  /**
   * Create.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `createApiVulnerabilitytimeseriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createApiVulnerabilitytimeseriesPost(params: {
    body: VulnerabilityTimeseriesCreate
  }): Observable<VulnerabilityTimeseries> {

    return this.createApiVulnerabilitytimeseriesPost$Response(params).pipe(
      map((r: StrictHttpResponse<VulnerabilityTimeseries>) => r.body as VulnerabilityTimeseries)
    );
  }

  /**
   * Path part for operation getApiVulnerabilitytimeseriesIdGet
   */
  static readonly GetApiVulnerabilitytimeseriesIdGetPath = '/api/vulnerabilitytimeseries/{id}';

  /**
   * Get.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApiVulnerabilitytimeseriesIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApiVulnerabilitytimeseriesIdGet$Response(params: {
    id: string;
  }): Observable<StrictHttpResponse<VulnerabilityTimeseries>> {

    const rb = new RequestBuilder(this.rootUrl, VulnerabilityTimeseriesService.GetApiVulnerabilitytimeseriesIdGetPath, 'get');
    if (params) {
      rb.path('id', params.id, {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<VulnerabilityTimeseries>;
      })
    );
  }

  /**
   * Get.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `getApiVulnerabilitytimeseriesIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApiVulnerabilitytimeseriesIdGet(params: {
    id: string;
  }): Observable<VulnerabilityTimeseries> {

    return this.getApiVulnerabilitytimeseriesIdGet$Response(params).pipe(
      map((r: StrictHttpResponse<VulnerabilityTimeseries>) => r.body as VulnerabilityTimeseries)
    );
  }

  /**
   * Path part for operation deleteApiVulnerabilitytimeseriesIdDelete
   */
  static readonly DeleteApiVulnerabilitytimeseriesIdDeletePath = '/api/vulnerabilitytimeseries/{id}';

  /**
   * Delete.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteApiVulnerabilitytimeseriesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApiVulnerabilitytimeseriesIdDelete$Response(params: {
    id: string;
  }): Observable<StrictHttpResponse<any>> {

    const rb = new RequestBuilder(this.rootUrl, VulnerabilityTimeseriesService.DeleteApiVulnerabilitytimeseriesIdDeletePath, 'delete');
    if (params) {
      rb.path('id', params.id, {});
    }

    return this.http.request(rb.build({
      responseType: 'json',
      accept: 'application/json'
    })).pipe(
      filter((r: any) => r instanceof HttpResponse),
      map((r: HttpResponse<any>) => {
        return r as StrictHttpResponse<any>;
      })
    );
  }

  /**
   * Delete.
   *
   *
   *
   * This method provides access to only to the response body.
   * To access the full response (for headers, for example), `deleteApiVulnerabilitytimeseriesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApiVulnerabilitytimeseriesIdDelete(params: {
    id: string;
  }): Observable<any> {

    return this.deleteApiVulnerabilitytimeseriesIdDelete$Response(params).pipe(
      map((r: StrictHttpResponse<any>) => r.body as any)
    );
  }

}
